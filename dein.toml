[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'morhetz/gruvbox'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
map <F3> :NERDTreeToggle<CR>
let NERDTreeWinPos='rightbelow'
let NERDTreeMapActivateNode='l'
let NERDTreeShowHidden = 1
'''

[[plugins]]
repo = 'wsdjeg/dein-ui.vim'

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'

[[plugins]]
repo = 'preservim/nerdcommenter'
hook_add = '''
" Create default mappings
let g:NERDCreateDefaultMappings = 1

" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" Enable NERDCommenterToggle to check all selected lines is commented or not
let g:NERDToggleCheckAllLines = 1

map <Space>cl :call nerdcommenter#Comment('', 'toggle')<CR>
'''

[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
hook_add = '''
let g:coc_global_extensions = [
  \ 'coc-tsserver',
  \ 'coc-json',
  \ 'coc-pyright',
  \ 'coc-html',
  \ 'coc-css',
  \ 'coc-java',
  \ 'coc-flutter',
  \ 'coc-react-refactor',
  \ 'coc-git',
  \ 'coc-sql',
  \ 'coc-lua',
  \ 'coc-swagger',
 \ ]

if isdirectory('./node_modules') && isdirectory('./node_modules/prettier')
  let g:coc_global_extensions += ['coc-prettier']
endif

if isdirectory('./node_modules') && isdirectory('./node_modules/eslint')
  let g:coc_global_extensions += ['coc-eslint']
endif

command! -nargs=0 Format :call CocActionAsync('format')
map <Space>bf :Format<CR>

inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
'''

[[plugins]]
repo = 'github/copilot.vim'
hook_add = '''
map <Space>cp :Copilot panel<CR>
'''

[[plugins]]
repo = 'mhinz/vim-startify'

[[plugins]]
repo = 'sbdchd/neoformat'
hook_add = '''
let g:neoformat_enabled_javascript=['prettier']
let g:neoformat_enabled_typescript=['prettier']
'''

[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add='''
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = ' '
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ' '
let g:airline_symbols.maxlinenr = ' '
let g:airline_symbols.dirty='⚡'
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'hwrnr/baloo.nvim'

[[plugins]]
repo = 'vijaymarupudi/nvim-fzf'

[[plugins]]
repo = 'hwrnr/nvim-fzf-commands'
hook_add = '''
command! FZFFiles lua require("fzf-commands").files()
command! -nargs=1 FZFGrep call luaeval('require("fzf-commands").rg(_A)', <f-args>)

map <Space>pf :FZFFiles<CR>
map <Space>p/ :FZFGrep 

'''
